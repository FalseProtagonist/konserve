#+TITLE: Backend implementation guide
* Motivation
  :PROPERTIES:
  :CUSTOM_ID: h:82cb52f5-af8a-45f7-afed-22c0bd94a213
  :END:
  
Konserve provides a minimalistic user interface that can be understood as a
[[https://www.youtube.com/watch?v=hnROywmy_HI&list=PLetHPRQvX4a-c3KDRTxxwGRmEMutL8Apf&index=4][lense]] into key-value stores. It's main purpose is portability to as many
backends as possible. This document is describing how to implement such
backends. Feel free to ignore parts of this document to get something running
quickly, but be aware that we can only support backends that adhere to this
document.

* Preconditions
  :PROPERTIES:
  :CUSTOM_ID: h:c9e81de1-064f-4953-a321-48584bebe100
  :END:
  - understanding of the backend store you want to integrate
  - basic understanding of [[https://github.com/clojure/core.async][core.async]]

    
* Postconditions
  :PROPERTIES:
  :CUSTOM_ID: h:47c887a4-7a87-4b9e-a7f4-e5ad432fd450
  :END:
  - understanding of the protocols
  - understanding of how to do error handling
  - understanding of how to handle migrations

    
* Target audience
  :PROPERTIES:
  :CUSTOM_ID: h:041fdf32-f2b3-4e7b-90b4-910106ee5c08
  :END:
  
Advanced Clojure developers with the need to durably store data with a flexible
interface, e.g. users of [[https://github.com/replikativ/datahike][Datahike]] or [[https:/replikativ.io/][replikativ]] or developers who want to [[https://whilo.github.io/articles/16/unified-storage-io][retain
portability of their storage backend in general]].

** Related work
   :PROPERTIES:
   :CUSTOM_ID: h:df77b6cc-65cc-4c43-a5a1-be5d98ffa072
   :END:
   
[[https://datomic.com][Datomic]] is providing a set of storage backends for its persistent indices. There
are also [[https://github.com/maxogden/abstract-blob-store][libraries]] for JavaScript that provide a similar interface, but without
the lense-like interface and practically all libraries are not cross-platform
between JVM and JavaScript.
   
* Protocols 
  :PROPERTIES:
  :CUSTOM_ID: h:e653a3e0-84e8-4885-ab53-3a3d8b414fc5
  :END:
  
The boundary between the user facing API's of konserve and the backends are
defined in [[file:../src/konserve/protocols.cljc][protocols.cljc]]. The protocols =PEDNAsyncKeyValueStore=,
=PBinaryAsyncKeyValueStore= and =PKeyIterable= are the protocols that need to be
implemented by each backend. Each protocol method implementation has to return a
go channel. Only the operations =-update-in=, =-assoc-in=, =-dissoc= and
=-bassoc= can /mutate the state/ of the durable medium.


** Metadata  
   :PROPERTIES:
   :CUSTOM_ID: h:96674cbe-3534-4627-a847-bc3075b60984
   :END:

 Konserve internally uses metadata that is kept separate from the operations on
 the values. This metadata is used to track the time when values are mutated for
 example, a functionality that is needed by the concurrent garbage collector.
 The metadata itself is an =edn= map. There are no size limitations of metadata
 fixed in the protocol, if you cannot implement your backend without a size
 limit then please document it. Metadata can also be used by third parties to
 track important contextual information such as user access control rights or
 maybe even edit histories and therefore supporting at least a megabyte in size
 might be a future proof limitation. The =get-meta= protocol reads only the
 metadata part of the respective key and therefore should not fetch the value.
 It is used by the garbage collector and potentially other monitoring processes
 that otherwise would read all data regularly.
 
=TODO= document schema.
 
** ACID
   :PROPERTIES:
   :CUSTOM_ID: h:e8add7fe-33dc-4bba-a1a3-3895c19ad844
   :END:

Konserve is providing [[https://en.wikipedia.org/wiki/ACID][ACID]] guarantees for each key to its users. 

*** Atomicity
    :PROPERTIES:
    :CUSTOM_ID: h:4311c3a1-2287-40ac-bcde-a97affbe2a3b
    :END:
Your write operation should either completely succeed or fail. Typically this
is provided by the underlying store, but you might need to first write a new
value and then do an atomic swap, as is done in the filestore with an atomic
file renaming. The metadata update and the value update need to be updated in
the same atomic transaction.
 
*** Consistency
    :PROPERTIES:
    :CUSTOM_ID: h:88a73805-5229-439e-94a7-a4bc8628db80
    :END:
The underlying store should provide consistent views on the data. This is
typically not a property you have to worry about, but it is a good idea to point
your users to the consistency guarantees provided. A reasonable backend should
at least provide [[https://en.wikipedia.org/wiki/Isolation_(database_systems)#Read_committed][read-committed]] semantics.

*** Isolation
    :PROPERTIES:
    :CUSTOM_ID: h:764ea3ba-0d29-4118-82ef-6ed2a1916484
    :END:
You are guaranteed by the [[file:../src/konserve/core.cljc#L36][go-locked]] macro to have no concurrent state mutations
on individual keys. This locking mechanism only holds inside a memory context of
a JVM. If you expect multiple JVM processes to operate on one backend you have
to make sure that crashing processes do not leave broken values. Usually this is
provided by the underlying distributed storage.

*** Durability
    :PROPERTIES:
    :CUSTOM_ID: h:b6a7799b-7bb7-41d7-8473-f33469b4fda4
    :END:
You must have written all data when the go channel you return yields a value,
i.e. everything needs to be transmitted to the backend. This guarantee depends
on the guarantees of the backend and you must clearly document this for your
users. It is a good idea to provide configuration options for the backend if
you see fit. The filestore provides a flip to turn of =fsync='ing for instance.


** Error handling
   :PROPERTIES:
   :CUSTOM_ID: h:4da56b25-ed3b-432c-aff5-2a0b6143f4ac
   :END:
   
All internal errors must be caught and returned as a throwable object on the
return channel following [[https://swannodette.github.io/2013/08/31/asynchronous-error-handling][this simple pattern]]. We provide similar helper macros
in [[file:../src/konserve/utils.cljc][utils.cljc]].


* Blocking IO 
  :PROPERTIES:
  :CUSTOM_ID: h:ca2e0658-daaa-4166-bd50-013fcb253d57
  :END:
  
Be aware that you must not use blocking IO operations in go-routines. The
easiest solution is to spawn threads with =clojure.core.async/thread=, but
ideally you should use asynchronous IO operations to provide maximum
scalability.


* Serializers
  :PROPERTIES:
  :CUSTOM_ID: h:8ac8b35c-9afd-4309-863a-5993b17841f7
  :END:
  
Konserve provides the protocol =PStoreSerializer= with a =-serialize= and
=-deserialize= method. You need to use these methods to serialize the edn
values, as they are supposed to be configurable by the user. 


* Migration 
  :PROPERTIES:
  :CUSTOM_ID: h:6cd7020b-f14d-4feb-96b3-1db67c5cb7cb
  :END:
  
Sometimes the chosen internal representation of a store turns out to be
insufficient as it was for the addition of metadata support as described in this
document. In this unfortunate situation a migration of the existing durable data
becomes necessary. Migrations have the following requirements:

1. They must not lose data, including on concurrent garbage collection.
2. They should work without user intervention.
3. They should work incrementally, upgrade each key on access, allowing version
   upgrades in production.
4. They can break old library versions running on the same store.


To determine the version of an old key we cannot read it since we do not know
its version... Therefore a dedicated inspection function is needed to determine
the version of the stored format. You can decide to store the version explicitly
if you think this is beneficial.

=TODO= Given the version and the current version of the code base we provide a
function determining the upgrade path.

You then need to provide an upgrade function between subsequent versions and can
apply those along the path provided. The migration will be automatically
triggered on reads.


* Example filestore
  :PROPERTIES:
  :CUSTOM_ID: h:396555c3-d339-4061-9e52-ce6eda636b34
  :END:
   
[[file:./figures/state_machine.png]]

The figure illustrates the different paths that are taken by read or update
operations. =io-operation=, =read-file= and =update-file= are functions in the
[[file:../src/konserve/filestore.clj][filestore]] namespace while each phase dispatches internally on a context
describing the top-level io operation, e.g. whether reading or writing is
necessary. This explicit contextual environment is not strictly necessary, but
reduces duplication of code. The filestore uses =core.async= internally, but you
can also use callback APIs and just put the value on a channel in the end, e.g.
through promises. Please take care to return all errors though.

The filestore uses the following memory layout:

1. 8 bytes for metadata size
2. serialized metadata
3. serialized or binary value

Storing the metadata size is necessary to allow to read only the metadata (and
also to skip it). You can store the metadata also separately if your store allows
atomic transactions over both objects, e.g. using two columns in SQL database.
 

* Tests 
  :PROPERTIES:
  :CUSTOM_ID: h:00075680-3ce6-4329-94eb-32ec8ff9174f
  :END:
  
=TODO= We provide a standard test suite that your store has to satisfy to be
compliant.

* Open issues
  :PROPERTIES:
  :CUSTOM_ID: h:c884f0bf-2048-43fc-970b-b6f0a4957c8f
  :END:
  - find a better visual language if possible
  - integrate logging
  - monitoring, e.g. of cache sizes, migration processes, performance ...?
  - document test suite
  - generalize core.async macros and move to [[https://github.com/replikativ/superv.async/][superv.async]]
